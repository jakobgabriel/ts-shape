name: Auto Bump Version

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  bump:
    if: >-
      github.actor != 'github-actions[bot]' &&
      !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Determine bump part
        id: bump_part
        run: |
          MSG="$(git log -1 --pretty=%B)"
          if echo "$MSG" | grep -qiE '(BREAKING CHANGE|#major|!:)'; then
            PART=major
          elif echo "$MSG" | grep -qiE '(^feat|#minor)'; then
            PART=minor
          else
            PART=patch
          fi
          echo "part=$PART" >> $GITHUB_OUTPUT
          echo "Commit message: $MSG"
          echo "Bump part: $PART"

      - name: Bump version in setup.py
        id: bump
        env:
          PART: ${{ steps.bump_part.outputs.part }}
        run: |
          python - <<'PY'
          import os, re, pathlib
          part = os.environ.get('PART','patch')
          p = pathlib.Path('setup.py')
          s = p.read_text(encoding='utf-8')
          m = re.search(r"version\s*=\s*['\"](\d+)\.(\d+)\.(\d+)['\"]", s)
          if not m:
              raise SystemExit('Version not found in setup.py (expected version="X.Y.Z")')
          major, minor, patch = map(int, m.groups())
          if part == 'major':
              major, minor, patch = major + 1, 0, 0
          elif part == 'minor':
              minor, patch = minor + 1, 0
          else:
              patch += 1
          new = f"{major}.{minor}.{patch}"
          s2 = re.sub(r"(version\s*=\s*['\"])\d+\.\d+\.\d+(['\"])", rf"\\1{new}\\2", s)
          p.write_text(s2, encoding='utf-8')
          print(new)
          # write to GITHUB_OUTPUT
          out = pathlib.Path(os.environ['GITHUB_OUTPUT'])
          out.write_text(f"version={new}\n", encoding='utf-8')
          PY

      - name: Commit and tag
        env:
          VERSION: ${{ steps.bump.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add setup.py
          git commit -m "chore(release): v${VERSION} [skip ci]" || echo "No changes to commit"
          git tag -a "v${VERSION}" -m "Release v${VERSION}" || echo "Tag already exists"
          git push origin HEAD:main
          git push origin "v${VERSION}" || echo "Tag push failed"

